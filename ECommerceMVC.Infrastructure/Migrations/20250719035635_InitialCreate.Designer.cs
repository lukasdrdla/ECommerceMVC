// <auto-generated />
using System;
using ECommerceMVC.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ECommerceMVC.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250719035635_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ECommerceMVC.Domain.Entities.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e267f58c-77d3-4c91-9e99-65e56a479bed",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "f267a58c-77d3-4c91-9e99-65e56a479bed",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("ECommerceMVC.Domain.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AdressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e067f58c-77d3-4c91-9e99-65e56a479bed",
                            AccessFailedCount = 0,
                            AdressLine1 = "123 Main St",
                            AdressLine2 = "Apt 4B",
                            City = "Prague",
                            ConcurrencyStamp = "5feb2659-5a19-4d55-a30a-b7e3916e6052",
                            Country = "Czech Republic",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "Test",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKpJ0s7HKbFjJUuPiqdsDMlqvn8F4CZFbELwW5JLBpKvGF3HU8kJ5Q4Z6Hq8tQ2m9Q==",
                            PhoneNumberConfirmed = false,
                            PostalCode = "11000",
                            SecurityStamp = "e067f58c-77d3-4c91-9e99-65e56a479bed",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        },
                        new
                        {
                            Id = "f067f58c-77d3-4c91-9e99-65e56a479bed",
                            AccessFailedCount = 0,
                            AdressLine1 = "456 Oak Street",
                            City = "Brno",
                            ConcurrencyStamp = "7d85278e-5a02-42cf-bc81-e64c52d7710b",
                            Country = "Czech Republic",
                            Email = "user@user.com",
                            EmailConfirmed = true,
                            FirstName = "User",
                            LastName = "Test",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@USER.COM",
                            NormalizedUserName = "USER@USER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDcWJHQu0zQ9TiIYwJK1AUteBrK6YNbN2h5oeXZG9Kkn7RHFDMIQg3fT9RqUrcpFMA==",
                            PhoneNumberConfirmed = false,
                            PostalCode = "60200",
                            SecurityStamp = "f067f58c-77d3-4c91-9e99-65e56a479bed",
                            TwoFactorEnabled = false,
                            UserName = "user@user.com"
                        });
                });

            modelBuilder.Entity("ECommerceMVC.Domain.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Prémiová značka mobilních telefonů a elektroniky.",
                            LogoUrl = "/images/brands/apple.png",
                            Name = "Apple"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Globální výrobce telefonů, televizí a paměťových zařízení.",
                            LogoUrl = "/images/brands/samsung.png",
                            Name = "Samsung"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Značka specializující se na bezpečnostní kamery a systémy.",
                            LogoUrl = "/images/brands/reolink.png",
                            Name = "Reolink"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Značka sportovního oblečení, obuvi a doplňků.",
                            LogoUrl = "/images/brands/nike.png",
                            Name = "Nike"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Výrobce výkonných notebooků, PC a serverů.",
                            LogoUrl = "/images/brands/dell.png",
                            Name = "Dell"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Akční kamery a příslušenství pro outdoor a sport.",
                            LogoUrl = "/images/brands/gopro.png",
                            Name = "GoPro"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Značka kvalitní spotřební elektroniky a zábavy.",
                            LogoUrl = "/images/brands/sony.png",
                            Name = "Sony"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Kreativní stavebnice a hračky pro děti i dospělé.",
                            LogoUrl = "/images/brands/lego.png",
                            Name = "LEGO"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Počítače, komponenty a herní zařízení.",
                            LogoUrl = "/images/brands/asus.png",
                            Name = "Asus"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Módní oblečení za dostupné ceny.",
                            LogoUrl = "/images/brands/hm.png",
                            Name = "H&M"
                        });
                });

            modelBuilder.Entity("ECommerceMVC.Domain.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("ECommerceMVC.Domain.Entities.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("ECommerceMVC.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Chytré telefony a příslušenství.",
                            IsActive = true,
                            Name = "Mobilní telefony"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Počítače, notebooky a jejich komponenty.",
                            IsActive = true,
                            Name = "Notebooky a PC"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Kamery, senzory, alarmy a chytré zabezpečení.",
                            IsActive = true,
                            Name = "Bezpečnostní technika"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Sportovní potřeby, oblečení a doplňky.",
                            IsActive = true,
                            Name = "Sportovní vybavení"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Stylové oblečení a obuv pro každého.",
                            IsActive = true,
                            Name = "Móda a oblečení"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Hračky pro děti všech věkových kategorií.",
                            IsActive = true,
                            Name = "Hračky a stavebnice"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Televize, reproduktory, audio zařízení.",
                            IsActive = true,
                            Name = "TV a audio"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Digitální a akční kamery, příslušenství.",
                            IsActive = true,
                            Name = "Fotoaparáty a kamery"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Konzole, ovladače, příslušenství pro hráče.",
                            IsActive = true,
                            Name = "Herní zóna"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Smart zařízení, žárovky, zásuvky a pomocníci do domácnosti.",
                            IsActive = true,
                            Name = "Domácnost a chytrá zařízení"
                        });
                });

            modelBuilder.Entity("ECommerceMVC.Domain.Entities.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductVariantId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Inventories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProductVariantId = 1,
                            Quantity = 50,
                            WarehouseId = 1
                        },
                        new
                        {
                            Id = 2,
                            ProductVariantId = 2,
                            Quantity = 0,
                            WarehouseId = 1
                        },
                        new
                        {
                            Id = 3,
                            ProductVariantId = 3,
                            Quantity = 70,
                            WarehouseId = 1
                        },
                        new
                        {
                            Id = 4,
                            ProductVariantId = 4,
                            Quantity = 40,
                            WarehouseId = 2
                        },
                        new
                        {
                            Id = 5,
                            ProductVariantId = 5,
                            Quantity = 25,
                            WarehouseId = 2
                        },
                        new
                        {
                            Id = 6,
                            ProductVariantId = 6,
                            Quantity = 120,
                            WarehouseId = 3
                        },
                        new
                        {
                            Id = 7,
                            ProductVariantId = 7,
                            Quantity = 100,
                            WarehouseId = 3
                        });
                });

            modelBuilder.Entity("ECommerceMVC.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ShippingMethodId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ShippingMethodId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = "e067f58c-77d3-4c91-9e99-65e56a479bed",
                            OrderDate = new DateTime(2025, 7, 1, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            ShippingMethodId = 1,
                            TotalAmount = 64998m
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = "f067f58c-77d3-4c91-9e99-65e56a479bed",
                            OrderDate = new DateTime(2025, 7, 3, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            ShippingMethodId = 2,
                            TotalAmount = 3299m
                        },
                        new
                        {
                            Id = 3,
                            CustomerId = "e067f58c-77d3-4c91-9e99-65e56a479bed",
                            OrderDate = new DateTime(2025, 7, 5, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            ShippingMethodId = 3,
                            TotalAmount = 1499m
                        },
                        new
                        {
                            Id = 4,
                            CustomerId = "f067f58c-77d3-4c91-9e99-65e56a479bed",
                            OrderDate = new DateTime(2025, 7, 6, 11, 15, 0, 0, DateTimeKind.Unspecified),
                            ShippingMethodId = 1,
                            TotalAmount = 29999m
                        },
                        new
                        {
                            Id = 5,
                            CustomerId = "f067f58c-77d3-4c91-9e99-65e56a479bed",
                            OrderDate = new DateTime(2025, 7, 7, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            ShippingMethodId = 2,
                            TotalAmount = 599m
                        });
                });

            modelBuilder.Entity("ECommerceMVC.Domain.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OrderId = 1,
                            ProductVariantId = 1,
                            Quantity = 2,
                            UnitPrice = 29999m
                        },
                        new
                        {
                            Id = 2,
                            OrderId = 2,
                            ProductVariantId = 6,
                            Quantity = 1,
                            UnitPrice = 2999m
                        },
                        new
                        {
                            Id = 3,
                            OrderId = 3,
                            ProductVariantId = 10,
                            Quantity = 1,
                            UnitPrice = 1499m
                        },
                        new
                        {
                            Id = 4,
                            OrderId = 4,
                            ProductVariantId = 2,
                            Quantity = 1,
                            UnitPrice = 34999m
                        },
                        new
                        {
                            Id = 5,
                            OrderId = 5,
                            ProductVariantId = 9,
                            Quantity = 1,
                            UnitPrice = 599m
                        });
                });

            modelBuilder.Entity("ECommerceMVC.Domain.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("ECommerceMVC.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHomePageFeatured")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Nejnovější Apple iPhone",
                            IsActive = true,
                            IsHomePageFeatured = false,
                            Name = "iPhone 15 Pro"
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 2,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Vlajkový model Samsungu",
                            IsActive = true,
                            IsHomePageFeatured = false,
                            Name = "Samsung Galaxy S23"
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 5,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Lehký a výkonný notebook Dell",
                            IsActive = true,
                            IsHomePageFeatured = false,
                            Name = "Dell XPS 13"
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 9,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Herní notebook Asus",
                            IsActive = true,
                            IsHomePageFeatured = false,
                            Name = "Asus ROG Strix"
                        },
                        new
                        {
                            Id = 5,
                            BrandId = 3,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Bezdrátová bezpečnostní kamera",
                            IsActive = true,
                            IsHomePageFeatured = false,
                            Name = "Reolink Argus 3"
                        },
                        new
                        {
                            Id = 6,
                            BrandId = 7,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Profesionální IP kamera",
                            IsActive = true,
                            IsHomePageFeatured = false,
                            Name = "Hikvision DS-2CD"
                        },
                        new
                        {
                            Id = 7,
                            BrandId = 4,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2025, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Sportovní běžecké boty",
                            IsActive = true,
                            IsHomePageFeatured = false,
                            Name = "Nike Air Zoom"
                        },
                        new
                        {
                            Id = 8,
                            BrandId = 4,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2025, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Pohodlné sportovní tričko",
                            IsActive = true,
                            IsHomePageFeatured = false,
                            Name = "Adidas T-shirt"
                        },
                        new
                        {
                            Id = 9,
                            BrandId = 10,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2025, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Stylové džíny",
                            IsActive = true,
                            IsHomePageFeatured = false,
                            Name = "H&M Jeans"
                        },
                        new
                        {
                            Id = 10,
                            BrandId = 10,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2025, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Teplý svetr na zimu",
                            IsActive = true,
                            IsHomePageFeatured = false,
                            Name = "H&M Svetr"
                        },
                        new
                        {
                            Id = 11,
                            BrandId = 8,
                            CategoryId = 6,
                            CreatedAt = new DateTime(2025, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Policie stavebnice",
                            IsActive = true,
                            IsHomePageFeatured = false,
                            Name = "LEGO City Police"
                        },
                        new
                        {
                            Id = 12,
                            BrandId = 8,
                            CategoryId = 6,
                            CreatedAt = new DateTime(2025, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Technická stavebnice pro pokročilé",
                            IsActive = true,
                            IsHomePageFeatured = false,
                            Name = "LEGO Technic"
                        },
                        new
                        {
                            Id = 13,
                            BrandId = 7,
                            CategoryId = 7,
                            CreatedAt = new DateTime(2025, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "4K UHD televizor",
                            IsActive = true,
                            IsHomePageFeatured = false,
                            Name = "Sony Bravia 55\""
                        },
                        new
                        {
                            Id = 14,
                            BrandId = 6,
                            CategoryId = 7,
                            CreatedAt = new DateTime(2025, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Přenosný Bluetooth reproduktor",
                            IsActive = true,
                            IsHomePageFeatured = false,
                            Name = "Bose SoundLink"
                        },
                        new
                        {
                            Id = 15,
                            BrandId = 6,
                            CategoryId = 8,
                            CreatedAt = new DateTime(2025, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Akční kamera nové generace",
                            IsActive = true,
                            IsHomePageFeatured = false,
                            Name = "GoPro HERO11"
                        },
                        new
                        {
                            Id = 16,
                            BrandId = 7,
                            CategoryId = 8,
                            CreatedAt = new DateTime(2025, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Profesionální bezzrcadlovka",
                            IsActive = true,
                            IsHomePageFeatured = false,
                            Name = "Canon EOS R6"
                        },
                        new
                        {
                            Id = 17,
                            BrandId = 7,
                            CategoryId = 9,
                            CreatedAt = new DateTime(2025, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Nová herní konzole Sony",
                            IsActive = true,
                            IsHomePageFeatured = false,
                            Name = "PlayStation 5"
                        },
                        new
                        {
                            Id = 18,
                            BrandId = 9,
                            CategoryId = 9,
                            CreatedAt = new DateTime(2025, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Výkonná konzole Microsoft",
                            IsActive = true,
                            IsHomePageFeatured = false,
                            Name = "Xbox Series X"
                        },
                        new
                        {
                            Id = 19,
                            BrandId = 7,
                            CategoryId = 10,
                            CreatedAt = new DateTime(2025, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Chytré osvětlení do domácnosti",
                            IsActive = true,
                            IsHomePageFeatured = false,
                            Name = "Philips Hue Starter Kit"
                        },
                        new
                        {
                            Id = 20,
                            BrandId = 7,
                            CategoryId = 10,
                            CreatedAt = new DateTime(2025, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Chytrý domácí asistent",
                            IsActive = true,
                            IsHomePageFeatured = false,
                            Name = "Google Nest Hub"
                        });
                });

            modelBuilder.Entity("ECommerceMVC.Domain.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("ECommerceMVC.Domain.Entities.ProductTag", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ProductTags");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            TagId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            TagId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            TagId = 3
                        },
                        new
                        {
                            ProductId = 4,
                            TagId = 4
                        },
                        new
                        {
                            ProductId = 5,
                            TagId = 5
                        },
                        new
                        {
                            ProductId = 6,
                            TagId = 6
                        });
                });

            modelBuilder.Entity("ECommerceMVC.Domain.Entities.ProductVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DiscountPercentage")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DiscountPercentage = 0,
                            Price = 29999m,
                            ProductId = 1,
                            Sku = "IP15PRO-128GB-BLK",
                            StockQuantity = 50
                        },
                        new
                        {
                            Id = 2,
                            DiscountPercentage = 5,
                            Price = 34999m,
                            ProductId = 1,
                            Sku = "IP15PRO-256GB-WHT",
                            StockQuantity = 30
                        },
                        new
                        {
                            Id = 3,
                            DiscountPercentage = 0,
                            Price = 24999m,
                            ProductId = 2,
                            Sku = "SGS23-128GB-GRN",
                            StockQuantity = 70
                        },
                        new
                        {
                            Id = 4,
                            DiscountPercentage = 10,
                            Price = 27999m,
                            ProductId = 2,
                            Sku = "SGS23-256GB-PNK",
                            StockQuantity = 40
                        },
                        new
                        {
                            Id = 5,
                            DiscountPercentage = 0,
                            Price = 34999m,
                            ProductId = 3,
                            Sku = "DXPS13-I7-16GB",
                            StockQuantity = 25
                        },
                        new
                        {
                            Id = 6,
                            DiscountPercentage = 0,
                            Price = 2999m,
                            ProductId = 4,
                            Sku = "NIKE-AIRZOOM-42",
                            StockQuantity = 120
                        },
                        new
                        {
                            Id = 7,
                            DiscountPercentage = 0,
                            Price = 2999m,
                            ProductId = 4,
                            Sku = "NIKE-AIRZOOM-44",
                            StockQuantity = 100
                        },
                        new
                        {
                            Id = 8,
                            DiscountPercentage = 0,
                            Price = 3999m,
                            ProductId = 5,
                            Sku = "REOLINK-ARGUS3-BLK",
                            StockQuantity = 100
                        },
                        new
                        {
                            Id = 9,
                            DiscountPercentage = 0,
                            Price = 599m,
                            ProductId = 6,
                            Sku = "ADIDAS-TSHIRT-M",
                            StockQuantity = 200
                        },
                        new
                        {
                            Id = 10,
                            DiscountPercentage = 0,
                            Price = 1499m,
                            ProductId = 7,
                            Sku = "LEGO-CITY-POLICE",
                            StockQuantity = 300
                        });
                });

            modelBuilder.Entity("ECommerceMVC.Domain.Entities.ProductVariantAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("ProductVariantAttributes");
                });

            modelBuilder.Entity("ECommerceMVC.Domain.Entities.ProductVariantImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("ProductVariantImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "/images/variants/iphone15pro_black.jpg",
                            IsMain = true,
                            ProductVariantId = 1
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "/images/variants/iphone15pro_white.jpg",
                            IsMain = true,
                            ProductVariantId = 2
                        },
                        new
                        {
                            Id = 3,
                            ImageUrl = "/images/variants/galaxys23_green.jpg",
                            IsMain = true,
                            ProductVariantId = 3
                        },
                        new
                        {
                            Id = 4,
                            ImageUrl = "/images/variants/galaxys23_pink.jpg",
                            IsMain = true,
                            ProductVariantId = 4
                        },
                        new
                        {
                            Id = 5,
                            ImageUrl = "/images/variants/dellxps13.jpg",
                            IsMain = true,
                            ProductVariantId = 5
                        },
                        new
                        {
                            Id = 6,
                            ImageUrl = "/images/variants/nike_air_zoom_42.jpg",
                            IsMain = true,
                            ProductVariantId = 6
                        },
                        new
                        {
                            Id = 7,
                            ImageUrl = "/images/variants/nike_air_zoom_44.jpg",
                            IsMain = true,
                            ProductVariantId = 7
                        },
                        new
                        {
                            Id = 8,
                            ImageUrl = "/images/variants/reolink_argus3.jpg",
                            IsMain = true,
                            ProductVariantId = 8
                        },
                        new
                        {
                            Id = 9,
                            ImageUrl = "/images/variants/adidas_tshirt.jpg",
                            IsMain = true,
                            ProductVariantId = 9
                        },
                        new
                        {
                            Id = 10,
                            ImageUrl = "/images/variants/lego_city_police.jpg",
                            IsMain = true,
                            ProductVariantId = 10
                        });
                });

            modelBuilder.Entity("ECommerceMVC.Domain.Entities.RefundRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemId");

                    b.ToTable("RefundRequests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OrderItemId = 2,
                            Reason = "Produkt byl poškozený při doručení",
                            RequestedAt = new DateTime(2025, 7, 10, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        },
                        new
                        {
                            Id = 2,
                            OrderItemId = 4,
                            Reason = "Nesedí velikost",
                            RequestedAt = new DateTime(2025, 7, 11, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            OrderItemId = 5,
                            Reason = "Neodpovídá popisu",
                            RequestedAt = new DateTime(2025, 7, 12, 9, 45, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            Id = 4,
                            OrderItemId = 1,
                            Reason = "Změna rozhodnutí",
                            RequestedAt = new DateTime(2025, 7, 13, 18, 20, 0, 0, DateTimeKind.Unspecified),
                            Status = 3
                        });
                });

            modelBuilder.Entity("ECommerceMVC.Domain.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "Skvělý telefon, výborná výdrž baterie.",
                            CreatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = "f067f58c-77d3-4c91-9e99-65e56a479bed",
                            ProductId = 1,
                            Rating = 5
                        },
                        new
                        {
                            Id = 3,
                            Comment = "Funguje, ale občas se seká.",
                            CreatedAt = new DateTime(2025, 7, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = "f067f58c-77d3-4c91-9e99-65e56a479bed",
                            ProductId = 2,
                            Rating = 3
                        },
                        new
                        {
                            Id = 4,
                            Comment = "Úžasné sluchátka, perfektní zvuk.",
                            CreatedAt = new DateTime(2025, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = "f067f58c-77d3-4c91-9e99-65e56a479bed",
                            ProductId = 5,
                            Rating = 5
                        },
                        new
                        {
                            Id = 5,
                            Comment = "Velikost neodpovídá, vracím.",
                            CreatedAt = new DateTime(2025, 7, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = "e067f58c-77d3-4c91-9e99-65e56a479bed",
                            ProductId = 6,
                            Rating = 2
                        });
                });

            modelBuilder.Entity("ECommerceMVC.Domain.Entities.ShippingMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EstimatedDeliveryDays")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("ShippingMethods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Standardní doručení Českou poštou",
                            EstimatedDeliveryDays = 3,
                            Name = "Česká pošta",
                            Price = 89m
                        },
                        new
                        {
                            Id = 2,
                            Description = "Výdejní místa Zásilkovny po celé ČR",
                            EstimatedDeliveryDays = 2,
                            Name = "Zásilkovna",
                            Price = 79m
                        },
                        new
                        {
                            Id = 3,
                            Description = "Expresní doručení GLS kurýrem",
                            EstimatedDeliveryDays = 1,
                            Name = "GLS",
                            Price = 119m
                        },
                        new
                        {
                            Id = 4,
                            Description = "Osobní odběr na pobočce",
                            EstimatedDeliveryDays = 0,
                            Name = "Osobní odběr",
                            Price = 0m
                        });
                });

            modelBuilder.Entity("ECommerceMVC.Domain.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Novinka"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Akce"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Doprava zdarma"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Bestseller"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Výprodej"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Prémiové"
                        });
                });

            modelBuilder.Entity("ECommerceMVC.Domain.Entities.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Warehouses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "U Skladu 1, Praha",
                            Name = "Hlavní sklad Praha"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Technologická 12, Brno",
                            Name = "Sklad Brno"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Logistická 99, Ostrava",
                            Name = "Sklad Ostrava"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Průmyslová 23, Plzeň",
                            Name = "Záložní sklad Plzeň"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Lagerstraße 17, Berlin, Německo",
                            Name = "Zahraniční sklad - Berlín"
                        });
                });

            modelBuilder.Entity("ECommerceMVC.Domain.Entities.Wishlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Wishlists");
                });

            modelBuilder.Entity("ECommerceMVC.Domain.Entities.WishlistItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("WishlistId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("WishlistId");

                    b.ToTable("WishlistItems");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "e067f58c-77d3-4c91-9e99-65e56a479bed",
                            RoleId = "e267f58c-77d3-4c91-9e99-65e56a479bed"
                        },
                        new
                        {
                            UserId = "f067f58c-77d3-4c91-9e99-65e56a479bed",
                            RoleId = "f267a58c-77d3-4c91-9e99-65e56a479bed"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ECommerceMVC.Domain.Entities.Cart", b =>
                {
                    b.HasOne("ECommerceMVC.Domain.Entities.AppUser", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ECommerceMVC.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("ECommerceMVC.Domain.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerceMVC.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerceMVC.Domain.Entities.Inventory", b =>
                {
                    b.HasOne("ECommerceMVC.Domain.Entities.ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerceMVC.Domain.Entities.Warehouse", "Warehouse")
                        .WithMany("Inventories")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductVariant");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("ECommerceMVC.Domain.Entities.Order", b =>
                {
                    b.HasOne("ECommerceMVC.Domain.Entities.AppUser", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerceMVC.Domain.Entities.ShippingMethod", "ShippingMethod")
                        .WithMany("Orders")
                        .HasForeignKey("ShippingMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("ShippingMethod");
                });

            modelBuilder.Entity("ECommerceMVC.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("ECommerceMVC.Domain.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerceMVC.Domain.Entities.ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("ECommerceMVC.Domain.Entities.Payment", b =>
                {
                    b.HasOne("ECommerceMVC.Domain.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ECommerceMVC.Domain.Entities.Product", b =>
                {
                    b.HasOne("ECommerceMVC.Domain.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerceMVC.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ECommerceMVC.Domain.Entities.ProductImage", b =>
                {
                    b.HasOne("ECommerceMVC.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerceMVC.Domain.Entities.ProductTag", b =>
                {
                    b.HasOne("ECommerceMVC.Domain.Entities.Product", "Product")
                        .WithMany("ProductTags")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerceMVC.Domain.Entities.Tag", "Tag")
                        .WithMany("ProductTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("ECommerceMVC.Domain.Entities.ProductVariant", b =>
                {
                    b.HasOne("ECommerceMVC.Domain.Entities.Product", "Product")
                        .WithMany("Variants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerceMVC.Domain.Entities.ProductVariantAttribute", b =>
                {
                    b.HasOne("ECommerceMVC.Domain.Entities.ProductVariant", "ProductVariant")
                        .WithMany("Attributes")
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("ECommerceMVC.Domain.Entities.ProductVariantImage", b =>
                {
                    b.HasOne("ECommerceMVC.Domain.Entities.ProductVariant", "ProductVariant")
                        .WithMany("ProductVariantImages")
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("ECommerceMVC.Domain.Entities.RefundRequest", b =>
                {
                    b.HasOne("ECommerceMVC.Domain.Entities.OrderItem", "OrderItem")
                        .WithMany()
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("ECommerceMVC.Domain.Entities.Review", b =>
                {
                    b.HasOne("ECommerceMVC.Domain.Entities.AppUser", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerceMVC.Domain.Entities.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerceMVC.Domain.Entities.Wishlist", b =>
                {
                    b.HasOne("ECommerceMVC.Domain.Entities.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("ECommerceMVC.Domain.Entities.WishlistItem", b =>
                {
                    b.HasOne("ECommerceMVC.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerceMVC.Domain.Entities.Wishlist", "Wishlist")
                        .WithMany("WishlistItems")
                        .HasForeignKey("WishlistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Wishlist");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("ECommerceMVC.Domain.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ECommerceMVC.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ECommerceMVC.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("ECommerceMVC.Domain.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerceMVC.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ECommerceMVC.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ECommerceMVC.Domain.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ECommerceMVC.Domain.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("ECommerceMVC.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ECommerceMVC.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("ECommerceMVC.Domain.Entities.Product", b =>
                {
                    b.Navigation("ProductTags");

                    b.Navigation("Reviews");

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("ECommerceMVC.Domain.Entities.ProductVariant", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("ProductVariantImages");
                });

            modelBuilder.Entity("ECommerceMVC.Domain.Entities.ShippingMethod", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ECommerceMVC.Domain.Entities.Tag", b =>
                {
                    b.Navigation("ProductTags");
                });

            modelBuilder.Entity("ECommerceMVC.Domain.Entities.Warehouse", b =>
                {
                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("ECommerceMVC.Domain.Entities.Wishlist", b =>
                {
                    b.Navigation("WishlistItems");
                });
#pragma warning restore 612, 618
        }
    }
}
